// Manufacturing Management System - Clean Schema
// Focused on essential manufacturing operations only

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management - Clean and Simple
model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  passwordHash String
  mobileNo    String?
  role        Role      @default(OPERATOR)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  manufacturingOrders ManufacturingOrder[]
  assignedWorkOrders  WorkOrder[] @relation("WorkOrderAssignee")
  workOrderComments   WorkOrderComment[]
  workOrderIssues     WorkOrderIssue[]

  @@map("users")
}

enum Role {
  MANUFACTURING_MANAGER  // Oversee production orders and workflows
  OPERATOR              // Execute assigned work orders and update status
  INVENTORY_MANAGER     // Track stock movement, raw material usage, and ledger balance
  BUSINESS_OWNER        // Monitor overall production KPIs, generate reports, and ensure traceability
}

// Product Management - Essential Fields Only
model Product {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  type          ProductType @default(RAW_MATERIAL)
  unitOfMeasure String      @default("PCS")
  unitCost      Float       @default(0)
  currentStock  Int         @default(0) // Real-time stock tracking
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  bomComponents  BOMComponent[]
  stockLedger    StockLedger[]
  manufacturingOrders ManufacturingOrder[]
  boms           BOM[]

  @@map("products")
}

enum ProductType {
  FINISHED_GOOD
  RAW_MATERIAL
  SEMI_FINISHED
}

// Bill of Materials
model BOM {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  reference   String?   // BOM reference number
  version     String?   @default("1.0")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  components  BOMComponent[]
  manufacturingOrders ManufacturingOrder[]

  @@map("boms")
}

model BOMComponent {
  id          Int       @id @default(autoincrement())
  bom         BOM       @relation(fields: [bomId], references: [id], onDelete: Cascade)
  bomId       Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
  unit        String    @default("PCS")
  cost        Float     @default(0)
  total       Float     @default(0)

  @@map("bom_components")
}

// Manufacturing Orders - Essential Fields
model ManufacturingOrder {
  id                Int       @id @default(autoincrement())
  moNumber          String    @unique // Auto-generated MO number
  finishedProduct   Product   @relation(fields: [finishedProductId], references: [id])
  finishedProductId Int
  quantity          Int
  scheduleDate      DateTime
  status            MOStatus  @default(DRAFT)
  billOfMaterial    BOM?      @relation(fields: [billOfMaterialId], references: [id])
  billOfMaterialId  Int?
  assignee          User?     @relation(fields: [assigneeId], references: [id])
  assigneeId        Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  workOrders        WorkOrder[]

  @@map("manufacturing_orders")
}

enum MOStatus {
  DRAFT
  CONFIRMED
  IN_PROGRESS
  TO_CLOSE
  CLOSED
  CANCELLED
  DELETED
}

// Work Orders - Essential Fields
model WorkOrder {
  id                Int       @id @default(autoincrement())
  manufacturingOrder ManufacturingOrder @relation(fields: [moId], references: [id], onDelete: Cascade)
  moId              Int
  workCenter        WorkCenter @relation(fields: [workCenterId], references: [id])
  workCenterId      Int
  operationName     String
  status            WOStatus  @default(PLANNED)
  expectedDuration  Int       // in minutes
  realDuration      Int?      // in minutes
  assignedTo        User?     @relation("WorkOrderAssignee", fields: [assignedToId], references: [id])
  assignedToId      Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  comments          WorkOrderComment[]
  issues            WorkOrderIssue[]

  @@map("work_orders")
}

enum WOStatus {
  PLANNED
  STARTED
  PAUSED
  COMPLETED
  CANCELLED
}

// Work Centers - Essential Fields
model WorkCenter {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  capacity    Int       @default(8) // hours per day
  costPerHour Float     @default(0)
  status      WorkCenterStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workOrders  WorkOrder[]

  @@map("work_centers")
}

enum WorkCenterStatus {
  ACTIVE
  UNDER_MAINTENANCE
  INACTIVE
}

// Stock Ledger - Essential Fields
model StockLedger {
  id              Int             @id @default(autoincrement())
  product         Product         @relation(fields: [productId], references: [id])
  productId       Int
  transactionType TransactionType
  quantity        Int
  unitCost        Float           @default(0)
  totalValue      Float           @default(0)
  reference       String?         // MO number, WO id, or Manual
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())

  @@map("stock_ledger")
}

enum TransactionType {
  IN
  OUT
  ADJUSTMENT
}

// Work Order Comments - Simple
model WorkOrderComment {
  id          Int       @id @default(autoincrement())
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  workOrderId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  comment     String
  createdAt   DateTime  @default(now())

  @@map("work_order_comments")
}

// Work Order Issues - Simple
model WorkOrderIssue {
  id          Int       @id @default(autoincrement())
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  workOrderId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  issueType   String    // DELAY, QUALITY, EQUIPMENT, MATERIAL, OTHER
  description String
  severity    String    // LOW, MEDIUM, HIGH, CRITICAL
  status      String    // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("work_order_issues")
}