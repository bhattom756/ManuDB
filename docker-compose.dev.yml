version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: manufacturing_db_dev
    environment:
      POSTGRES_DB: manufacturing_db
      POSTGRES_USER: manufacturing_user
      POSTGRES_PASSWORD: manufacturing_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U manufacturing_user -d manufacturing_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Development
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: manufacturing_backend_dev
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://manufacturing_user:manufacturing_password@postgres:5432/manufacturing_db
      JWT_SECRET: your-super-secret-jwt-key-for-development
      CORS_ORIGIN: http://localhost:3000
      SENDGRID_API_KEY: your-sendgrid-api-key
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - /app/backend/node_modules
    command: npm run dev
    restart: unless-stopped

  # Frontend Development
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: manufacturing_frontend_dev
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: http://localhost:5000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

volumes:
  postgres_dev_data:
